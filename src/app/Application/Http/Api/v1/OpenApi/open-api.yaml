openapi: 3.0.0
info:
  title: Back To Win API
  version: 1.0.0
  description: |
      # Introduction
      This API is documented in **OpenAPI format** and is a resource on how to use the Back To Win API.

      # Authentication
      Authentication for the Back To Win API is via JWT Bearer Token. Once registered as a User a token is retrieved
      by sending a request to `POST /auth/token` with the following example payload:
      ```
      {
        "email": "joe@joe.com",
        "password": "myreallycomplicatedpassword!@woo"
      }
      ```

      If verification passes the following response payload will be returned:
      ```
      {
        "status": "success",
        "data": {
            "token": "eyJhbGciOiJIUzI..."
          }
      }
      ```
      All requests with the exception of `POST /auth/token` and `POST /api/user` require the following header to access
      the applications resources:

      `Authorization: Bearer {token value}`
  contact:
    name: API Support
    email: joesweeny84@hotmail.com
    url: https://github.com/joesweeny/game-platform
servers:
  - url: https://api-staging.backtowin.io
    description: Staging Environment

paths:
  /api/avatar:
    put:
      description: Create or update an Avatar for a User
      tags:
        - Avatar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Avatar'

      responses:
        '200':
          description: Response to confirm the Game has been settled
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    nullable: true

        '403':
          description: Not authorized to perform this request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '404':
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '422':
          description: Unable to settle Game with properties provided in request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/avatar/{userId}:
    get:
      description: Retrieve an avatar for a specific User
      tags:
        - Avatar
      parameters:
        - in: path
          name: userId
          schema:
            $ref: '#/components/schemas/Uuid'
          required: true
          description: ID of the User

      responses:
        '200':
          description: Response containing avatar meta data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      avatar:
                        $ref: '#/components/schemas/Avatar'

        '403':
          description: Not authorized to perform this request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '404':
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/game:
    post:
      description: Create a new Game
      tags:
        - Game
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: ['GENERAL_KNOWLEDGE']
                currency:
                  type: string
                  example: 'FAKE'
                  description: The currency for the Game used for buy_in, max and min properties
                buy_in:
                  type: integer
                  example: 500
                  description: The cost to buy into the Game in the smallest possible denominator for currency i.e. pence
                max:
                  type: integer
                  example: 50
                  description: >-
                    The maximum figure for the Game in line with the rules in the smallest possible denominator for currency i.e. pence
                min:
                  type: integer
                  example: 10
                  description: >-
                    The minimum figure for the Game in line with the rules in the smallest possible denominator for currency i.e. pence
                start:
                  $ref: '#/components/schemas/Date'
                players:
                  type: integer
                  example: 4
                  description: The total amount of players who can enter the Game
      responses:
        '200':
          description: Response containing data of newly created Game
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      game:
                        $ref: '#/components/schemas/Game'

        '400':
          description: The request sent was incorrectly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '422':
          description: Unable to create resource with properties provided in request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      description: Get an array of all Games created
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: ['CREATED', 'CANCELLED', 'COMPLETED', 'IN_PLAY']
          description: The current status of a Game
        - in: query
          name: limit
          schema:
            type: string
            example: '2018-03-12T15:00+00:00'
          description: The date the Game starts (returning all Games starting on or after date provided)
        - in: query
          name: currency
          schema:
            type: string
            example: 'FAKE'
          description: The currency associated to the Game
        - in: query
          name: buy_in
          schema:
            type: integer
            example: 1000
          description: The Game buy in value (returning all Games starting at this price or less)
      tags:
        - Game
      responses:
        '200':
          description: An array of filtered Games
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      games:
                        type: array
                        items:
                          $ref: '#/components/schemas/Game'

        '403':
          description: Not authorized to perform this request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/game/{id}:
    get:
      description: Retrieve data for a specific Game
      tags:
        - Game
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/Uuid'
          required: true
          description: ID of the User
      responses:
        '200':
          description: Response containing data of requested Game
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      game:
                        $ref: '#/components/schemas/Game'
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'

        '403':
          description: Not authorized to perform this request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '404':
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/game/{gameId}/user/{userId}:
    post:
      description: Enter a User into a Game
      tags:
        - Game
      parameters:
        - in: path
          name: gameId
          schema:
            $ref: '#/components/schemas/Uuid'
          required: true
          description: ID of the Game to enter
        - in: path
          name: userId
          schema:
            $ref: '#/components/schemas/Uuid'
          required: true
          description: ID of the User to enter

      responses:
        '200':
          description: Response to confirm User has entered Game
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    nullable: true

        '403':
          description: Not authorized to perform this request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '404':
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/game/settle:
    post:
      description: Settle a Game by finalising and paying the winner
      tags:
        - Game
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game_id:
                  $ref: '#/components/schemas/Uuid'
                user_id:
                  $ref: '#/components/schemas/Uuid'
                currency:
                  type: string
                  example: 'FAKE'
                  description: The currency for the Game used for buy_in, max and min properties
                amount:
                  type: integer
                  example: 500
                  description: The figure to pay the winning User

      responses:
        '200':
          description: Response to confirm the Game has been settled
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    nullable: true

        '403':
          description: Not authorized to perform this request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '404':
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '422':
          description: Unable to settle Game with properties provided in request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user:
    post:
      security: []
      description: Create a new User for this application
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: joesweeny
                email:
                  type: string
                  example: joe@joe.com
                password:
                  type: string
                  example: myreallycomplicatedpassword!@woo
                currency:
                  type: string
                  example: 'FAKE'

      responses:
        '200':
          description: Response containing data of newly created User
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'

        '400':
          description: The request sent was incorrectly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '422':
          description: Unable to create resource with properties provided in request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      description: Get an array of all Users registered
      tags:
        - User
      responses:
        '200':
          description: An array of all Users registered to this application
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'

        '403':
          description: Not authorized to perform this request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user/{id}:
    get:
      description: Retrieve data for a specific User
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/Uuid'
          required: true
          description: ID of the User
      responses:
        '200':
          description: Response containing data of requested User
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'

        '403':
          description: Not authorized to perform this request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '404':
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user/{id}/purse:
    get:
      description: The total balance of a specific User's purse
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/Uuid'
          required: true
          description: ID of the User
      responses:
        '200':
          description: Response containing data of requested User
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
                  data:
                    type: object
                    properties:
                      purse:
                        type: object
                        properties:
                          user_id:
                            $ref: '#/components/schemas/Uuid'
                          currency:
                            type: string
                            example: 'FAKE'
                          amount:
                            type: integer
                            example: 1000
                            description: The smallest denominator i.e. £10 = 1000

        '403':
          description: Not authorized to perform this request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '404':
          description: The requested resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailResponse'

        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Avatar:
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/Uuid'
        filename:
          type: string
          example: avatar.jpg
        contents:
          type: string
          example: 'ZmlsZSBjb250ZW50cyBvZiB0aGUgYXZhdGFyLmpwZyBmaWxl'
          description: base64 encoded string

    Date:
      type: string
      description: A date formatted to ISO 8601 specification
      example: '2018-03-12T15:00:00+00:00'

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: 'error'
        data:
          type: object
          properties:
            errors:
              type: array
              items:
                $ref: '#/components/schemas/JsendError'

    FailResponse:
      type: object
      properties:
        status:
          type: string
          example: 'fail'
        data:
          type: object
          properties:
            errors:
              type: array
              items:
                $ref: '#/components/schemas/JsendError'

    Game:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        type:
          type: string
          enum: ['GENERAL_KNOWLEDGE']
        currency:
          type: string
          example: 'FAKE'
        buy_in:
          type: integer
          example: 500
          description: The cost to buy into the Game in the smallest possible denominator for currency i.e. pence
        max:
          type: integer
          example: 50
          description: >-
            The maximum figure for the Game in line with the rules in the smallest possible denominator for currency i.e. pence
        min:
          type: integer
          example: 10
          description: >-
            The minimum figure for the Game in line with the rules in the smallest possible denominator for currency i.e. pence
        start:
          $ref: '#/components/schemas/Date'
        players:
          type: integer
          example: 4
          description: The total amount of players who can enter the Game

    JsendError:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
          example: 'Something went wrong'
        code:
          type: integer
          example: 1
          description: >-
            A code to identify the error. "1" is used when no specific error code has been defined for this error

    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        username:
          type: string
          example: joesweeny
        email:
          type: string
          example: joe@joe.com
        created_at:
          $ref: '#/components/schemas/Date'
        updated_at:
          $ref: '#/components/schemas/Date'

    Uuid:
      type: string
      description: UUID string using the v4 specification
      example: 'd3562005-4598-4e4e-9149-3d12ed58e14f'

